/* Date:01/01/2019
 *  
 MIT License

Copyright (c) 2019 Exotic-verma

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 *  This code is to communicate with thingspeak speak server using esp8266 and arduino.
 * Here We are trying to send temperature data of two sensor(lm35/ds18b20).
 * code is developed by Gyanendra verma(Exotic-verma).
 * Only exception is you have to configure your esp first to connect with wifi, if using AT commands. 
 * Then only it will work.
 */

#include <SoftwareSerial.h> // Software serial library for esp can be downloaded from githb.
#include <stdlib.h>
#include <OneWire.h>
#include <DallasTemperature.h> //onewire.h and DallasTemperature.h are libraries for ds18b20
// LED
int ledPin = 13; 
// LM35 analog input
int lm35Pin = A1;
int ONE_WIRE_BUS=12; //it data pin of ds18b20 sensor.
// Setup a oneWire instance to communicate with any OneWire devices  
// (not just Maxim/Dallas temperature ICs) 
OneWire oneWire( ONE_WIRE_BUS); 

// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);

// replace with your channel's thingspeak API key
String apiKey = "XX81KBNAU85KNLDU";

// connect 10 to TX of Serial USB
// connect 11 to RX of serial USB
SoftwareSerial ser(10, 9); // RX, TX

// this runs once
void setup() {                
  // initialize the digital pin as an output.
  pinMode(ledPin, OUTPUT);    

  // enable debug serial&ds18b20 sensors. 
  Serial.begin(9600); 
  sensors.begin();
  // enable software serial
  ser.begin(9600);
   
  
  // reset ESP8266
  ser.println("AT+RST");
}


// the loop 
void loop() {
  
  // blink LED on board
  digitalWrite(ledPin, HIGH);   
  delay(200);               
  digitalWrite(ledPin, LOW);

  // read the value from LM35.
  // read 10 values for averaging.
  int val = 0;
  for(int i = 0; i < 10; i++) {
      val += analogRead(lm35Pin);   
      delay(500);
  }

  // convert to temp:
  // temp value is in 0-1023 range
  // LM35 outputs 10mV/degree C. ie, 1 Volt => 100 degrees C
  // So Temp = (avg_val/1023)*5 Volts * 100 degrees/Volt
  float temp = val*50.0f/1023.0f;
  
  sensors.requestTemperatures(); // Send the command to get temperature readings 
   float dtemp = (sensors.getTempCByIndex(0));
 delay(1000);

  // convert to string
  char buf[16];
  String strTemp = dtostrf(temp, 4, 1, buf);
  Serial.print("lm35 Temp:");
  Serial.println(strTemp);       // To print data of lm35 to serial moniter.

  //temp for ds18b20
   char dig[16];
  String dsTemp = dtostrf(dtemp, 4, 1, dig);

  
  Serial.print("Ds18b20 Temp:");
  Serial.println(dsTemp);     //To print data of ds18b20 to serial moniter.
  Serial.println();

  // TCP connection
  String cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += "184.106.153.149"; // api.thingspeak.com
  cmd += "\",80";
  ser.println(cmd);
   
  if(ser.find("Error")){
    Serial.println("AT+CIPSTART error");
    return;
  }
  
  // prepare GET string
  String getStr = "GET /update?api_key=";
  getStr += apiKey;
  getStr +="&field1=";
  getStr += String(strTemp); //after field adress data adress is required.
  getStr +="&field2=";
  getStr += String(dsTemp); 
  getStr += "\r\n\r\n";

  // send data length
  cmd = "AT+CIPSEND=";
  cmd += String(getStr.length());
  ser.println(cmd);

  if(ser.find(">")){
    ser.print(getStr);
  }
  else{
    ser.println("AT+CIPCLOSE");
    // alert user
    Serial.println("AT+CIPCLOSE");
  }
    
  // thingspeak needs 15 sec delay between updates
  delay(16000); 
}
